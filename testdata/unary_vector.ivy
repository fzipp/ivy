# Copyright 2014 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Unary operations on vectors.

23 45 56
	23 45 56

1/3 2/3 3/4
	1/3 2/3 3/4

1e10 1.5
	10000000000 3/2

1 (2 3) (4 5 6)
	1 (2 3) (4 5 6)

# A vector with expressions
x = 4
1 x (x**2) (-x)
	1 4 16 -4

x = 4
1 x (x**2) (-x)[3]
	16

(3) 4 5
	3 4 5

)seed 0
?10 10 10
	3 7 4

+ 23 45 56
	23 45 56

+-23 -45 -56
	-23 -45 -56

+ -23 -45 -56
	-23 -45 -56

- 23 45 56
	-23 -45 -56

--23 45 56
	23 -45 -56

- -23 -45 -56
	23 45 56

/23 45 56
	1/23 1/45 1/56

/-23 45 56
	-1/23 1/45 1/56

sgn -1/3 0 3 1e10
	-1 0 1 1

inv 1 2 3
	1/14 1/7 3/14

inv 1j1 2j2 3j3
	1/28j-1/28 1/14j-1/14 3/28j-3/28

inv inv 1 2 3
	1 2 3

inv inv 1j1 2j2 3j3
	1j1 2j2 3j3

not 0 1 2 3
	1 0 0 0

abs -75/23 3 4
	75/23 3 4

floor -75/23 3.1 4.2
	-4 3 4

ceil -75/23 3.1 4.2
	-3 4 5

iota 3 4
	(1 1) (1 2) (1 3) (1 4)
	(2 1) (2 2) (2 3) (2 4)
	(3 1) (3 2) (3 3) (3 4)

)origin 0
iota 3 4
	(0 0) (0 1) (0 2) (0 3)
	(1 0) (1 1) (1 2) (1 3)
	(2 0) (2 1) (2 2) (2 3)

rho 75/23 17 28
	3

,3 4 5
	3 4 5

up 6 5 8 10 4 1 2 5 4 7
	6 7 5 9 2 8 1 10 3 4

down 6 5 8 10 4 1 2 5 4 7
	4 3 10 1 8 2 9 5 7 6

rot iota 0
	#

rot iota 1
	1

rot iota 10
	10 9 8 7 6 5 4 3 2 1

# rot doesn't overwrite its argument. Issue #24
x=iota 10
y = rot x
x
	1 2 3 4 5 6 7 8 9 10

flip iota 0
	#

flip iota 1
	1

flip iota 10
	10 9 8 7 6 5 4 3 2 1

unique iota 5
	1 2 3 4 5

unique 1 1 2 2
	1 2

unique 'mississippi'
	misp

unique 1 (2 3) (4 5) (2 3) 4
	1 (2 3) (4 5) 4

# Choose the "lowest" type of same value
unique 1j0 1 1/1 (float 1) 2/1 2j0 2 (float 2)
	1 2

unique 1 'a' 2 'b' 3 'a' 2
	1 a 2 b 3

unique iota 0
	#

flatten 7
	7

flatten 3 4
	3 4

flatten ,\1 2 3 4
	1 1 2 1 2 3 1 2 3 4

# Fixed bug: don't use user-defined functions in core calculations.
op rot x = 99
flip 1 2 3  # Used rot internally.
	3 2 1

box 1 2 3
	(1 2 3)

box iota 0
	()

first 1 2 3
	1

first (1 2 3) (4 5 6)
	1 2 3

first iota 0
	0

mix 1 2 3
	1 2 3

mix (1 2) (3 4)
	1 2
	3 4

mix 'ab' 'cd'
	ab
	cd

mix 'ab' (2 3)
	a b
	2 3

mix 9 (3 4 rho iota 10)
	 9  0  0  0
	 0  0  0  0
	 0  0  0  0

	 1  2  3  4
	 5  6  7  8
	 9 10  1  2


mix 9 (3 4 rho iota 10) (2 2 rho 9 8 7 6) # Matrices of different sizes.
	 9  0  0  0
	 0  0  0  0
	 0  0  0  0

	 1  2  3  4
	 5  6  7  8
	 9 10  1  2

	 9  8  0  0
	 7  6  0  0
	 0  0  0  0

mix (2 5 rho iota 10) (3 4 rho iota 12) # Fills out to maximum on each axis.
	 1  2  3  4  5
	 6  7  8  9 10
	 0  0  0  0  0

	 1  2  3  4  0
	 5  6  7  8  0
	 9 10 11 12  0

# If there is no fill, mix and split are inverses.
split mix (1 2) (3 4)
	(1 2) (3 4)

mix split 2 2 rho iota 4
	1 2
	3 4

up mix 'ab' 'ac' 'aa'
	3 1 2

where 0==2 mod iota 6
	1 2

x[where not (x=3*iota 10) mod 5]
	15 30
